const { runSql } = require("./sql");

function parseSharedFields(req, to) {
  if (to === "evidence") {
    //from property
    return {
      howEvidenceRecovered: req.body.how_recovered,
      propertyType: req.body.bir,
      propertyValue: req.body.prop_value,
      numberOfStolenMotorVehicle: req.body.stolen,
      numberOfRecoveredMotoVehicle: req.body.monor_no,
      suspectedDrugType: req.body.drug_type,
      estimatedDrugQuantity: req.body.drug_quantity,
      drugMeasurementType: req.body.drug_measure,
      plateNumber: req.body.plate,
      registeredState: req.body.register,
      registerYear: req.body.reg_year,
      vehicleMake: req.body.make,
      vehicleModel: req.body.model,
      vehicleColor: req.body.color,
      victimLink: req.body.suspect_link_1,
      vehicleVIN: req.body.vehicle_VIN,
      serialNo: req.body.serial_no,
      ncicNo: req.body.ncic_no,
      otherNo: req.body.other_no,
      quantity: req.body.quantity,
      additionalDescription: req.body.property_description,
      recoveredBy: req.body.recovered_by,
      recoveryAddress: req.body.recovery_address,
      recoveryLatitude: req.body.recovery_pointy,
      recoveryLongitude: req.body.recovery_pointx,
      licensePlateState: req.body.register,
      licensePlateNumber: req.body.plate,
      licensePlateVIN: req.body.vehicle_VIN,
      vehicleYear: req.body.veh_year,
      towedBy: req.body.towed_by,
      towedAddress: req.body.towed_address,
      vehicleId: req.body.vehicle_id,
      submittedBy: req.body.submitted_by,
      reasonSeized: req.body.reason_seized,
      ownerFirstName: req.body.owner_first_name,
      ownerMiddleName: req.body.owner_middle_name,
      ownerLastName: req.body.owner_last_name,
      ownerDateOfBirth: req.body.owner_dob,
      ownerSex: req.body.owner_sex,
      ownerRace: req.body.owner_race,
      ownerAddress: req.body.owner_victim_address,
      ownerPhone: req.body.owner_victim_phone,
      ownerEmployer: req.body.owner_employer,
      ownerEmployerPhone: req.body.owner_employer_phone,
      ownerEmployerAddress: req.body.owner_employer_address,
      ownerAptNo: req.body.apt_no_person,
      masterNameId: req.body.master_name_id,
      ownerLongAddress: req.body.addrs3,
      ownerAddressLongitude: req.body.lng3,
      ownerAddressLatitude: req.body.lat3,
      ownerNeighborhood: req.body.nghbd3,
      ownerCity: req.body.city3,
      ownerCounty: req.body.county3,
      ownerState: req.body.state3,
      ownerZipCode: req.body.zip3,
      ownerCountry: req.body.country3,
      ownerSuffix: req.body.suffix,
      temporaryRoomLocation: req.body.room_location,
      ownerType: req.body.owner_type,
      masterBusinessId: req.body.master_business_id,
      ownerBusinessName: req.body.business_name,
      ownerBusinessAddress: req.body.business_address,
      involvedPersonNote: req.body.involvedPersonNote,
      involvedPersonNote2: req.body.involvedPersonNote2,
      dateRecovered: req.body.evidence_date_recovered,
      dateSubmitted: req.body.evidence_date_submitted,
    };
  }

  if (to === "property") {
    //from evidence
    return {
      howEvidenceRecovered: req.body.property_type,
      propertyType: req.body.bir,
      propertyValue: req.body.prop_value,
      numberOfStolenMotorVehicle: req.body.stolen,
      numberOfRecoveredMotoVehicle: req.body.monor_no,
      suspectedDrugType: req.body.drug_type,
      estimatedDrugQuantity: req.body.drug_quantity,
      drugMeasurementType: req.body.drug_measure,
      plateNumber: req.body.plate,
      registeredState: req.body.register,
      registerYear: req.body.reg_year,
      vehicleMake: req.body.make,
      vehicleModel: req.body.model,
      vehicleColor: req.body.color,
      vehicleVIN: req.body.vehicle_VIN,
      serialNo: req.body.serial_no,
      ncicNo: req.body.ncic_no,
      otherNo: req.body.other_no,
      quantity: req.body.quantity,
      additionalDescription: req.body.property_description,
      recoveredBy: req.body.recovered_by,
      recoveryAddress: req.body.address,
      recoveryLatitude: req.body.lat,
      recoveryLongitude: req.body.lng,
      licensePlateState: req.body.register,
      licensePlateNumber: req.body.plate,
      licensePlateVIN: req.body.vehicle_VIN,
      vehicleYear: req.body.veh_year,
      towedBy: req.body.towed_by,
      towedAddress: req.body.towed_address,
      vehicleId: req.body.vehicle_id,
      submittedBy: req.body.submitted_by,
      reasonSeized: req.body.reason_seized,
      ownerFirstName: req.body.reportee_first_name,
      ownerMiddleName: req.body.reportee_middle_name,
      ownerLastName: req.body.reportee_last_name,
      ownerDateOfBirth: req.body.reportee_dob,
      ownerSex: req.body.reportee_sex,
      ownerRace: req.body.reportee_race,
      ownerAddress: req.body.reportee_victim_address,
      ownerPhone: req.body.reportee_victim_phone,
      ownerEmployer: req.body.reportee_employer,
      ownerEmployerPhone: req.body.reportee_employer_phone,
      ownerEmployerAddress: req.body.reportee_employer_address,
      ownerAptNo: req.body.apt_no_person,
      masterNameId: req.body.master_name_id,
      ownerLongAddress: req.body.addrs3,
      ownerAddressLongitude: req.body.lng3,
      ownerAddressLatitude: req.body.lat3,
      ownerNeighborhood: req.body.nghbd3,
      ownerCity: req.body.city3,
      ownerCounty: req.body.county3,
      ownerState: req.body.state3,
      ownerZipCode: req.body.zip3,
      ownerCountry: req.body.country3,
      ownerSuffix: req.body.suffix,
      temporaryRoomLocation: req.body.temporary_room_location,
      ownerType: req.body.owner_type,
      masterBusinessId: req.body.master_business_id,
      ownerBusinessName: req.body.business_name,
      ownerBusinessAddress: req.body.business_address,
      involvedPersonNote: req.body.involvedPersonNote,
      involvedPersonNote2: req.body.involvedPersonNote2,
      dateRecovered: req.body.date_recovered,
      dateSubmitted: req.body.date_submitted,
    };
  }
}

exports.syncPropertyAndEvidence = async function ({ req, to, evidenceId, pool, EvidenceService }) {
  let result;
  const sharedFields = parseSharedFields(req, to);
  if (to === "evidence") {
    const query = `
        UPDATE evidence
        SET
          PropertyType = ?, 
          Description = ?,
          prop_value = ?,
          NumberofStolenMotorVeh = ?,
          NumberofRecoveredMotoVeh = ?,
          SuspectedDrugType = ?,
          EstimatedDrugQuantity = ?,
          DrugMeasurementType = ?,
          plate_number = ?,
          registered_state = ?,
          register_year = ?,
          vehicle_make = ?,
          vehicle_model = ?,
          vehicle_color = ?,
          victim_link = ?,
          vehicle_VIN = ?,
          serial_no = ?,
          ncic_no = ?,
          other_no = ?,
          quantity = ?,
          additional_description = ?,
          recovered_by = ?,
          recovery_address = ?,
          recovery_lat = ?,
          recovery_lng = ?,
          lp_state = ?,
          lp_plate_number = ?,
          lp_VIN = ?,
          vehicle_year = ?,
          towed_by = ?,
          towed_address = ?,
          vehicle_id = ?,
          submitted_by = ?,
          reason_seized = ?,
          reportee_first_name = ?,
          reportee_middle_name = ?,
          reportee_last_name = ?,
          reportee_dob = ?,
          reportee_sex = ?,
          reportee_race = ?,
          reportee_address = ?,
          reportee_phone = ?,
          reportee_employer = ?,
          reportee_employer_phone = ?,
          reportee_employer_address = ?,
          apt_no_person = ?,
          master_name_id = ?,
          person_address2 = ?,
          person_pointx = ?,
          person_pointy = ?,
          person_nghbd = ?,
          person_city = ?,
          person_county = ?,
          person_state = ?,
          person_zip = ?,
          person_country = ?,
          suffix = ?,
          temporary_room_location = ?,
          owner_type = ?,
          master_business_id = ?,
          business_name = ?,
          business_address = ?,
          involvedPersonNote = ?,
          involvedPersonNote2 = ?,
          DateRecovered = ?,
          date_submitted = ?
        WHERE 
          deleted IS NULL
          AND
          id = ?
      `;
    const params = [
      sharedFields.howEvidenceRecovered,
      sharedFields.propertyType,
      sharedFields.propertyValue,
      sharedFields.numberOfStolenMotorVehicle,
      sharedFields.numberOfRecoveredMotoVehicle,
      sharedFields.suspectedDrugType,
      sharedFields.estimatedDrugQuantity,
      sharedFields.drugMeasurementType,
      sharedFields.plateNumber,
      sharedFields.registeredState,
      sharedFields.registerYear,
      sharedFields.vehicleMake,
      sharedFields.vehicleModel,
      sharedFields.vehicleColor,
      sharedFields.victimLink,
      sharedFields.vehicleVIN,
      sharedFields.serialNo,
      sharedFields.ncicNo,
      sharedFields.otherNo,
      sharedFields.quantity,
      sharedFields.additionalDescription,
      sharedFields.recoveredBy,
      sharedFields.recoveryAddress,
      sharedFields.recoveryLatitude,
      sharedFields.recoveryLongitude,
      sharedFields.licensePlateState,
      sharedFields.licensePlateNumber,
      sharedFields.licensePlateVIN,
      sharedFields.vehicleYear,
      sharedFields.towedBy,
      sharedFields.towedAddress,
      sharedFields.vehicleId,
      sharedFields.submittedBy,
      sharedFields.reasonSeized,
      sharedFields.ownerFirstName,
      sharedFields.ownerMiddleName,
      sharedFields.ownerLastName,
      sharedFields.ownerDateOfBirth,
      sharedFields.ownerSex,
      sharedFields.ownerRace,
      sharedFields.ownerAddress,
      sharedFields.ownerPhone,
      sharedFields.ownerEmployer,
      sharedFields.ownerEmployerPhone,
      sharedFields.ownerEmployerAddress,
      sharedFields.ownerAptNo,
      sharedFields.masterNameId,
      sharedFields.ownerLongAddress,
      sharedFields.ownerAddressLongitude,
      sharedFields.ownerAddressLatitude,
      sharedFields.ownerNeighborhood,
      sharedFields.ownerCity,
      sharedFields.ownerCounty,
      sharedFields.ownerState,
      sharedFields.ownerZipCode,
      sharedFields.ownerCountry,
      sharedFields.ownerSuffix,
      sharedFields.temporaryRoomLocation,
      sharedFields.ownerType,
      sharedFields.masterBusinessId,
      sharedFields.ownerBusinessName,
      sharedFields.ownerBusinessAddress,
      sharedFields.involvedPersonNote,
      sharedFields.involvedPersonNote2,
      sharedFields.dateRecovered,
      sharedFields.dateSubmitted,
      evidenceId,
    ];
    result = await runSql(pool, query, params);

    if (!result.status) {
      return result;
    }

    if (
      req.body.room_location_check &&
      req.body.room_location &&
      req.body.room_location !== req.body.room_location_check
    ) {
      const evidenceResult = await runSql(pool, "SELECT evidence_no FROM evidence WHERE id = ?", [evidenceId]);

      if (!evidenceResult.status) {
        return evidenceResult;
      }

      const evidenceNo = evidenceResult.data[0].evidence_no;

      const checkinDate = new Date();

      result = await runSql(
        pool,
        "insert into evidence_check_out (evidence_no, user_check_in, date_in, returned_by, evidence_id, room_location) values ?",
        [
          [
            [
              evidenceNo,
              req.session.passport.user.name,
              checkinDate,
              req.session.passport.user.name,
              evidenceId,
              req.body.room_location,
            ],
          ],
        ]
      );

      if (!result.status) {
        return result;
      }

      const { insertId: newCheckOutId } = result.data;

      const evidenceService = new EvidenceService(req.department, req.session.passport.user);

      const chainResult = await evidenceService.addToEvidenceChain({
        evidenceId: evidenceId,
        user: req.session.passport.user.name,
        action: "check in",
        actionDate: checkinDate,
        roomLocation: req.body.room_location,
        checkOutId: newCheckOutId,
      });

      if (!chainResult.status) {
        return chainResult;
      }
    }
  }
  if (to === "property") {
    const query = `
        UPDATE property
        SET
          Description = ?,
          prop_value = ?,
          NumberofStolenMotorVeh = ?,
          NumberofRecoveredMotoVeh = ?,
          SuspectedDrugType = ?,
          EstimatedDrugQuantity = ?,
          DrugMeasurementType = ?,
          plate_number = ?,
          registered_state = ?,
          register_year = ?,
          vehicle_make = ?,
          vehicle_model = ?,
          vehicle_color = ?,
          vehicle_VIN = ?,
          serial_no = ?,
          ncic_no = ?,
          other_no = ?,
          quantity = ?,
          additional_description = ?,
          recovered_by = ?,
          recovery_address = ?,
          recovery_pointy = ?,
          recovery_pointx = ?,
          lp_state = ?,
          lp_plate_number = ?,
          lp_VIN = ?,
          vehicle_year = ?,
          towed_by = ?,
          towed_address = ?,
          vehicle_id = ?,
          submitted_by = ?,
          reason_seized = ?,
          how_recovered = ?,
          owner_first_name = ?,
          owner_middle_name = ?,
          owner_last_name = ?,
          owner_dob = ?,
          owner_sex = ?,
          owner_race = ?,
          owner_address = ?,
          owner_phone = ?,
          owner_employer = ?,
          owner_employer_phone = ?,
          owner_employer_address = ?,
          apt_no_person = ?,
          master_name_id = ?,
          person_address2 = ?,
          person_pointx = ?,
          person_pointy = ?,
          person_nghbd = ?,
          person_city = ?,
          person_county = ?,
          person_state = ?,
          person_zip = ?,
          person_country = ?,
          suffix = ?,
          room_location = ?,
          owner_type = ?,
          master_business_id = ?,
          business_name = ?,
          business_address = ?,
          involvedPersonNote = ?,
          involvedPersonNote2 = ?,
          evidence_date_recovered = ?,
          evidence_date_submitted = ?
        WHERE 
          deleted IS NULL
          AND
          evidence_id = ?
      `;
    const params = [
      sharedFields.propertyType,
      sharedFields.propertyValue,
      sharedFields.numberOfStolenMotorVehicle,
      sharedFields.numberOfRecoveredMotoVehicle,
      sharedFields.suspectedDrugType,
      sharedFields.estimatedDrugQuantity,
      sharedFields.drugMeasurementType,
      sharedFields.plateNumber,
      sharedFields.registeredState,
      sharedFields.registerYear,
      sharedFields.vehicleMake,
      sharedFields.vehicleModel,
      sharedFields.vehicleColor,
      sharedFields.vehicleVIN,
      sharedFields.serialNo,
      sharedFields.ncicNo,
      sharedFields.otherNo,
      sharedFields.quantity,
      sharedFields.additionalDescription,
      sharedFields.recoveredBy,
      sharedFields.recoveryAddress,
      sharedFields.recoveryLatitude,
      sharedFields.recoveryLongitude,
      sharedFields.licensePlateState,
      sharedFields.licensePlateNumber,
      sharedFields.licensePlateVIN,
      sharedFields.vehicleYear,
      sharedFields.towedBy,
      sharedFields.towedAddress,
      sharedFields.vehicleId,
      sharedFields.submittedBy,
      sharedFields.reasonSeized,
      sharedFields.howEvidenceRecovered,
      sharedFields.ownerFirstName,
      sharedFields.ownerMiddleName,
      sharedFields.ownerLastName,
      sharedFields.ownerDateOfBirth,
      sharedFields.ownerSex,
      sharedFields.ownerRace,
      sharedFields.ownerAddress,
      sharedFields.ownerPhone,
      sharedFields.ownerEmployer,
      sharedFields.ownerEmployerPhone,
      sharedFields.ownerEmployerAddress,
      sharedFields.ownerAptNo,
      sharedFields.masterNameId,
      sharedFields.ownerLongAddress,
      sharedFields.ownerAddressLongitude,
      sharedFields.ownerAddressLatitude,
      sharedFields.ownerNeighborhood,
      sharedFields.ownerCity,
      sharedFields.ownerCounty,
      sharedFields.ownerState,
      sharedFields.ownerZipCode,
      sharedFields.ownerCountry,
      sharedFields.ownerSuffix,
      sharedFields.temporaryRoomLocation,
      sharedFields.ownerType,
      sharedFields.masterBusinessId,
      sharedFields.ownerBusinessName,
      sharedFields.ownerBusinessAddress,
      sharedFields.involvedPersonNote,
      sharedFields.involvedPersonNote2,
      sharedFields.dateRecovered,
      sharedFields.dateSubmitted,
      evidenceId,
    ];
    result = await runSql(pool, query, params);
  }
  return result;
};
